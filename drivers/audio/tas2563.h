/*
 * Copyright (c) 2023, ithinx GmbH
 * Copyright (c) 2023, tonies SE
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef TAS2563_H
#define TAS2563_H

#include <zephyr/sys/util.h>

enum tas2563_output_limits {
	/** Minimal output gain in 0.5 dB resolution */
	CODEC_OUTPUT_MIN_GAIN = (8 * 2),
	/** Maximmal output gain in 0.5 dB resolution */
	CODEC_OUTPUT_MAX_GAIN = (18 * 2),
	/** Minimal output digital volume in 0.5 dB resolution */
	CODEC_OUTPUT_MIN_VOLUME = (-110 * 2),
	/** Maximal output digital volume in 0.5 dB resolution */
	CODEC_OUTPUT_MAX_VOLUME = (2 * 2)
};

#define TAS2563_REG(page, reg) (((page) << 7) + (reg))

enum tas2563_registers {
	TAS2563_REG_PAGE = TAS2563_REG(0, 0x00),
	TAS2563_REG_SW_RESET = TAS2563_REG(0, 0x01),
	TAS2563_REG_PWR_CTL = TAS2563_REG(0, 0x02),
	TAS2563_REG_PB_CFG1 = TAS2563_REG(0, 0x03),
	TAS2563_REG_MISC_CFG1 = TAS2563_REG(0, 0x04),
	TAS2563_REG_MISC_CFG2 = TAS2563_REG(0, 0x05),
	TAS2563_REG_TDM_CFG0 = TAS2563_REG(0, 0x06),
	TAS2563_REG_TDM_CFG1 = TAS2563_REG(0, 0x07),
	TAS2563_REG_TDM_CFG2 = TAS2563_REG(0, 0x08),
	TAS2563_REG_TDM_CFG3 = TAS2563_REG(0, 0x09),
	TAS2563_REG_TDM_CFG4 = TAS2563_REG(0, 0x0A),
	TAS2563_REG_TDM_CFG5 = TAS2563_REG(0, 0x0B),
	TAS2563_REG_TDM_CFG6 = TAS2563_REG(0, 0x0C),
	TAS2563_REG_TDM_CFG7 = TAS2563_REG(0, 0x0D),
	TAS2563_REG_TDM_CFG8 = TAS2563_REG(0, 0x0E),
	TAS2563_REG_TDM_CFG9 = TAS2563_REG(0, 0x0F),
	TAS2563_REG_TDM_CFG10 = TAS2563_REG(0, 0x10),
	TAS2563_REG_DSP_MODE_TDM_DET = TAS2563_REG(0, 0x11),
	TAS2563_REG_LIM_CFG0 = TAS2563_REG(0, 0x12),
	TAS2563_REG_LIM_CFG1 = TAS2563_REG(0, 0x13),
	TAS2563_REG_DSP_FREQ_BOP_CFG0 = TAS2563_REG(0, 0x14),
	TAS2563_REG_BOP_CFG0 = TAS2563_REG(0, 0x15),
	TAS2563_REG_BIL_ICLA_CFG0 = TAS2563_REG(0, 0x16),
	TAS2563_REG_BIL_ICLA_CFG1 = TAS2563_REG(0, 0x17),
	TAS2563_REG_GAIN_ICLA_CFG0 = TAS2563_REG(0, 0x18),
	TAS2563_REG_ICLA_CFG1 = TAS2563_REG(0, 0x19),
	TAS2563_REG_INT_MASK0 = TAS2563_REG(0, 0x1A),
	TAS2563_REG_INT_MASK1 = TAS2563_REG(0, 0x1B),
	TAS2563_REG_INT_MASK2 = TAS2563_REG(0, 0x1C),
	TAS2563_REG_INT_MASK3 = TAS2563_REG(0, 0x1D),
	TAS2563_REG_INT_LIVE0 = TAS2563_REG(0, 0x1E),
	TAS2563_REG_INT_LIVE1 = TAS2563_REG(0, 0x1F),
	TAS2563_REG_INT_LIVE2 = TAS2563_REG(0, 0x20),
	TAS2563_REG_INT_LIVE3 = TAS2563_REG(0, 0x21),
	TAS2563_REG_INT_LIVE4 = TAS2563_REG(0, 0x22),
	// reserved: 0x23
	TAS2563_REG_INT_LTCH0 = TAS2563_REG(0, 0x24),
	TAS2563_REG_INT_LTCH1 = TAS2563_REG(0, 0x25),
	TAS2563_REG_INT_LTCH3 = TAS2563_REG(0, 0x26),
	TAS2563_REG_INT_LTCH4 = TAS2563_REG(0, 0x27),
	// reserved: 0x24 - 0x29
	TAS2563_REG_VBAT_MSB = TAS2563_REG(0, 0x2A),
	TAS2563_REG_VBAT_LSB = TAS2563_REG(0, 0x2B),
	TAS2563_REG_TEMP = TAS2563_REG(0, 0x2C),
	// reserved: 0x2D - 0x2F
	TAS2563_REG_INT_CLK_CFG = TAS2563_REG(0, 0x30),
	TAS2563_REG_DIN_PD = TAS2563_REG(0, 0x31),
	TAS2563_REG_MISC0 = TAS2563_REG(0, 0x32),
	TAS2563_REG_BOOST_CFG1 = TAS2563_REG(0, 0x33),
	TAS2563_REG_BOOST_CFG2 = TAS2563_REG(0, 0x34),
	TAS2563_REG_BOOST_CFG3 = TAS2563_REG(0, 0x35),
	// reserved: 0x36 - 0x3A
	TAS2563_REG_MISC1 = TAS2563_REG(0, 0x3B),
	TAS2563_REG_TG_CFG0 = TAS2563_REG(0, 0x3F),
	TAS2563_REG_BOOST_ILIM_CFG0 = TAS2563_REG(0, 0x40),
	TAS2563_REG_PDM_CONFIG0 = TAS2563_REG(0, 0x41),
	TAS2563_REG_DIN_PD_PDM_CFG3 = TAS2563_REG(0, 0x42),
	TAS2563_REG_ASI2_CFG0 = TAS2563_REG(0, 0x43),
	TAS2563_REG_ASI2_CFG1 = TAS2563_REG(0, 0x44),
	TAS2563_REG_ASI2_CFG2 = TAS2563_REG(0, 0x45),
	TAS2563_REG_ASI2_CFG3 = TAS2563_REG(0, 0x46),
	// reserved: 0x47, 0x48
	TAS2563_REG_PVDD_MSB_DSP = TAS2563_REG(0, 0x49),
	TAS2563_REG_PVDD_LSB_DSP = TAS2563_REG(0, 0x4A),
	// reserved: 0x4B - 0x7C
	TAS2563_REG_REV_ID = TAS2563_REG(0, 0x7D),
	TAS2563_REG_I2C_CHKSUM = TAS2563_REG(0, 0x7E),
	TAS2563_REG_BOOK = TAS2563_REG(0, 0x7F),
	// page 2
	TAS2563_REG_DVC_CFG1 = TAS2563_REG(2, 0x0C),
	TAS2563_REG_DVC_CFG2 = TAS2563_REG(2, 0x0D),
	TAS2563_REG_DVC_CFG3 = TAS2563_REG(2, 0x0E),
	TAS2563_REG_DVC_CFG4 = TAS2563_REG(2, 0x0F)
};

enum tas2563_sw_reset {
	TAS2563_SW_RESET_MASK = BIT(0)
};

enum tas2563_pwr_ctl {
	TAS2563_PWR_CTL_PDM_I2S_MODE_ENABLED_MASK = BIT(7),
	TAS2563_PWR_CTL_LDG_MODE_ONLY_MASK = BIT(6),
	TAS2563_PWR_CTL_ISNS_PD_DOWN_MASK = BIT(3),
	TAS2563_PWR_CTL_VSNS_PD_DOWN_MASK = BIT(2),
	TAS2563_PWR_CTL_MODE_ACTIVE = 0x00,
	TAS2563_PWR_CTL_MODE_MUTE = 0x01,
	TAS2563_PWR_CTL_MODE_SW_SHUTDOWN = 0x02,
	TAS2563_PWR_CTL_MODE_DIAG_ACTIVE = 0x03,
	TAS2563_PWR_CTL_MODE_MASK = GENMASK(1, 0)
};

enum tas2563_pb_cfg1 {
	TAS2563_PB_CFG1_AMP_LEVEL = GENMASK(5, 1)
};

enum tas2563_tdm_cfg0 {
	TAS2563_TDM_CFG0_CLASSD_SYNC_MASK = BIT(6),
	TAS2563_TDM_CFG0_RAMP_RATE_44_1_MASK = BIT(5),
	TAS2563_TDM_CFG0_AUTO_RATE_DISABLED_MASK = BIT(4),
	TAS2563_TDM_CFG0_SAMP_RATE_7305_8KHZ = 0x00,
	TAS2563_TDM_CFG0_SAMP_RATE_14_7_16KHZ = 0x01,
	TAS2563_TDM_CFG0_SAMP_RATE_22_05_24KHZ = 0x02,
	TAS2563_TDM_CFG0_SAMP_RATE_29_4_32KHZ = 0x03,
	TAS2563_TDM_CFG0_SAMP_RATE_44_1_48KHZ = 0x04,
	TAS2563_TDM_CFG0_SAMP_RATE_88_2_96KHZ = 0x05,
	TAS2563_TDM_CFG0_SAMP_RATE_176_4_192KHZ = 0x06,
	TAS2563_TDM_CFG0_SAMP_RATE_MASK = GENMASK(3, 1),
	TAS2563_TDM_CFG0_FRAME_START_MASK = BIT(0),
};

enum tas2563_tdm_cfg1 {
	TAS2563_TDM_CFG1_RX_JUSTIFY_RIGHT_MASK = BIT(6),
	TAS2563_TDM_CFG1_RX_OFFSET_MASK = GENMASK(5, 1),
	TAS2563_TDM_CFG1_RX_EDGE_FALLING_MASK = BIT(0),
};

enum tas2563_tdm_cfg2 {
	TAS2563_TDM_CFG2_IVMON_LEN_8B = 0x00,
	TAS2563_TDM_CFG2_IVMON_LEN_16B = 0x01,
	TAS2563_TDM_CFG2_IVMON_LEN_24B = 0x02,
	TAS2563_TDM_CFG2_IVMON_LEN_32B = 0x03,
	TAS2563_TDM_CFG2_IVMON_LEN_MASK = GENMASK(7, 6),
	TAS2563_TDM_CFG2_RX_SCFG_MONO_I2C_ADDRESS_OFFSET = 0x00,
	TAS2563_TDM_CFG2_RX_SCFG_MONO_LEFT = 0x01,
	TAS2563_TDM_CFG2_RX_SCFG_MONO_RIGHT = 0x02,
	TAS2563_TDM_CFG2_RX_SCFG_MONO_STEREO_DOWNMIX = 0x03,
	TAS2563_TDM_CFG2_RX_SCFG_MASK = GENMASK(5, 4),
	TAS2563_TDM_CFG2_RX_WLEN_16B = 0x00,
	TAS2563_TDM_CFG2_RX_WLEN_20B = 0x01,
	TAS2563_TDM_CFG2_RX_WLEN_24B = 0x02,
	TAS2563_TDM_CFG2_RX_WLEN_32B = 0x03,
	TAS2563_TDM_CFG2_RX_WLEN_MASK = GENMASK(3, 2),
	TAS2563_TDM_CFG2_RX_SLEN_16B = 0x00,
	TAS2563_TDM_CFG2_RX_SLEN_24B = 0x01,
	TAS2563_TDM_CFG2_RX_SLEN_32B = 0x02,
	TAS2563_TDM_CFG2_RX_SLEN_MASK = GENMASK(1, 0),
};

enum tas2563_tdm_cfg3 {
	TAS2563_TDM_CFG3_RX_SLOT_R = GENMASK(7, 4),
	TAS2563_TDM_CFG3_RX_SLOT_L = GENMASK(3, 0),
};

enum tas2563_tdm_cfg5 {
	TAS2563_TDM_CFG5_VSNS_TX_EN_MASK = BIT(6),
	TAS2563_TDM_CFG5_VSNS_SLOT_MASK = GENMASK(5, 0)
};

enum tas2563_tdm_cfg6 {
	TAS2563_TDM_CFG6_ISNS_TX_EN_MASK = BIT(6),
	TAS2563_TDM_CFG6_ISNS_SLOT_MASK = GENMASK(5, 0)
};

#endif /* TAS2563_H */
